-- =====================================================
-- DEBUG CORRIGIDO: PROBLEMA DO VENDEDOR E CLIENTE
-- =====================================================
-- Baseado na estrutura do Supabase e nas políticas RLS identificadas

WITH user_details AS (
    SELECT 
        id,
        email,
        nome,
        cargo,
        codigo_vendedor,
        created_at,
        updated_at
    FROM profiles
    WHERE id = '09f316d7-eeac-4828-85a0-ad1b891f8460'
),
cliente_details AS (
    SELECT 
        codigo_cliente,
        nome_fantasia,
        razao_social,
        vendedor,
        codigo_ibge_cidade,
        cidade,
        bairro,
        situacao,
        valor_limite_credito,
        LENGTH(vendedor) as vendedor_length,
        UPPER(TRIM(vendedor)) as vendedor_normalized
    FROM tabela_clientes
    WHERE codigo_cliente = 100273
),
rotas_vendedor AS (
    SELECT 
        vr.vendedor_id,
        vr.rota,
        vr.ativo,
        COUNT(re.codigo_ibge_cidade) as total_cidades,
        string_agg(re.codigo_ibge_cidade || ' (' || re.nome_cidade || ')', ', ') as cidades_lista
    FROM vendedor_rotas vr
    LEFT JOIN rotas_estado re ON re.rota = vr.rota
    WHERE vr.vendedor_id = '09f316d7-eeac-4828-85a0-ad1b891f8460'
    GROUP BY vr.vendedor_id, vr.rota, vr.ativo
),
rotas_com_quixada AS (
    SELECT 
        rota,
        cod_vendedor,
        nome_cidade,
        codigo_ibge_cidade
    FROM rotas_estado
    WHERE codigo_ibge_cidade = '2311306'
),
politicas_ativas AS (
    SELECT 
        pol.polname as policy_name,
        pol.polcmd as command,
        CASE pol.polcmd
            WHEN 'r' THEN 'SELECT'
            WHEN 'a' THEN 'INSERT'
            WHEN 'w' THEN 'UPDATE'
            WHEN 'd' THEN 'DELETE'
            WHEN '*' THEN 'ALL'
        END as command_text,
        pol.polpermissive as is_permissive,
        array_to_string(pol.polroles::regrole[], ', ') as roles,
        pg_get_expr(pol.polqual, pol.polrelid) as using_expression,
        pg_get_expr(pol.polwithcheck, pol.polrelid) as with_check_expression
    FROM pg_policy pol
    JOIN pg_class c ON c.oid = pol.polrelid
    JOIN pg_namespace n ON n.oid = c.relnamespace
    WHERE c.relname = 'tabela_clientes'
        AND n.nspname = 'public'
),
verificacao_acesso AS (
    SELECT 
        u.id as user_id,
        u.cargo,
        u.codigo_vendedor,
        c.codigo_cliente,
        c.vendedor as cliente_vendedor,
        c.codigo_ibge_cidade,
        -- Verifica se é diretor ou gestor
        (u.cargo IN ('diretor', 'gestor')) as is_admin,
        -- Verifica se tem rota ativa
        EXISTS (
            SELECT 1 FROM vendedor_rotas 
            WHERE vendedor_id = u.id AND ativo = true
        ) as has_active_route,
        -- Verifica se tem a cidade na rota
        EXISTS (
            SELECT 1 
            FROM vendedor_rotas vr
            JOIN rotas_estado re ON re.rota = vr.rota
            WHERE vr.vendedor_id = u.id
                AND vr.ativo = true
                AND re.codigo_ibge_cidade = c.codigo_ibge_cidade
        ) as has_city_in_route,
        -- Verifica match por vendedor
        (
            u.codigo_vendedor::text = c.vendedor
            OR UPPER(TRIM(c.vendedor)) LIKE '%' || UPPER(SPLIT_PART(u.nome, ' ', 1)) || '%'
        ) as matches_vendedor_field
    FROM user_details u
    CROSS JOIN cliente_details c
),
diagnostico AS (
    SELECT 
        CASE 
            WHEN va.is_admin THEN 'ACESSO PERMITIDO - Usuário é diretor/gestor'
            WHEN NOT va.has_active_route THEN 'ACESSO NEGADO - Vendedor sem rotas ativas'
            WHEN NOT va.has_city_in_route THEN 'ACESSO NEGADO - Cidade do cliente não está nas rotas do vendedor'
            WHEN va.has_city_in_route THEN 'ACESSO PERMITIDO - Vendedor tem a cidade em suas rotas'
            ELSE 'ACESSO NEGADO - Motivo desconhecido'
        END as diagnostico,
        CASE 
            WHEN NOT va.has_active_route THEN 
                'Adicionar vendedor a uma rota que contenha a cidade ' || va.codigo_ibge_cidade
            WHEN NOT va.has_city_in_route THEN 
                'Adicionar a cidade ' || va.codigo_ibge_cidade || ' às rotas do vendedor'
            WHEN va.is_admin OR va.has_city_in_route THEN 
                'Nenhuma ação necessária - acesso deve funcionar'
            ELSE 
                'Verificar políticas RLS e logs de erro'
        END as solucao_sugerida
    FROM verificacao_acesso va
)
SELECT json_build_object(
    'timestamp', now(),
    'analise_usuario', (
        SELECT row_to_json(u) FROM user_details u
    ),
    'analise_cliente', (
        SELECT row_to_json(c) FROM cliente_details c
    ),
    'rotas_do_vendedor', (
        SELECT json_agg(row_to_json(r))
        FROM rotas_vendedor r
    ),
    'rotas_com_cidade_alvo', (
        SELECT json_agg(row_to_json(rq))
        FROM rotas_com_quixada rq
    ),
    'verificacao_acesso', (
        SELECT row_to_json(va) FROM verificacao_acesso va
    ),
    'politicas_rls_ativas', (
        SELECT json_agg(
            json_build_object(
                'nome', policy_name,
                'comando', command_text,
                'permissiva', is_permissive,
                'roles', roles,
                'condicao', using_expression
            ) ORDER BY command_text, policy_name
        )
        FROM politicas_ativas
    ),
    'diagnostico_final', (
        SELECT json_build_object(
            'resultado', diagnostico,
            'acao_recomendada', solucao_sugerida
        )
        FROM diagnostico
    ),
    'comandos_sql_sugeridos', json_build_object(
        'se_falta_rota', format(
            'INSERT INTO vendedor_rotas (vendedor_id, rota, ativo) VALUES (''%s'', (SELECT rota FROM rotas_estado WHERE codigo_ibge_cidade = ''%s'' LIMIT 1), true) ON CONFLICT (vendedor_id, rota) DO UPDATE SET ativo = true;',
            '09f316d7-eeac-4828-85a0-ad1b891f8460',
            '2311306'
        ),
        'se_falta_cidade_na_rota', format(
            'INSERT INTO rotas_estado (rota, codigo_ibge_cidade, nome_cidade) SELECT rota, ''%s'', ''QUIXADÁ'' FROM vendedor_rotas WHERE vendedor_id = ''%s'' AND ativo = true LIMIT 1;',
            '2311306',
            '09f316d7-eeac-4828-85a0-ad1b891f8460'
        ),
        'verificar_apos_correcao', 'SELECT * FROM vw_clientes_completo WHERE codigo_cliente = 100273;'
    )
) as debug_result;